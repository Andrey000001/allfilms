{"mappings":"ACAA,MAAM,EAAU,mCAKhB,eAAe,EAAY,EAAO,CAAC,EACjC,IAAM,EAAW,MAAM,MAAM,yDAA2B,UAAgB,GAAM,EACxE,EAAO,MAAM,EAAS,IAAI,GAgBhC,OAAO,QAAQ,GAAG,CAdI,MAAM,EAAK,OAAO,CAAC,GAAG,CAAC,MAAM,IACjD,GAAI,CACF,IAAM,EAAO,MAAM,MACjB,sCAAoB,EAAQ,EAAE,YAAY,kCAAwC,EAEpF,GAAI,CAAC,EAAK,EAAE,CACV,MAAM,AAAI,MAAM,EAAK,UAAU,EAGjC,OADa,MAAM,EAAK,IAAI,EAE9B,CAAE,MAAO,EAAO,CACd,QAAQ,GAAG,CAAC,aAAc,EAC5B,CACF,GAEF,CApBA,IAsBA,MAAM,EAAU,SAAS,aAAa,CAAC,aAEvC,eAAe,IACb,GAAI,CAQF,IAAM,EAAS,AANc,AADhB,CAAA,MAAM,GAAnB,EACkC,MAAM,CAAC,AAAA,IACvC,GAAI,AAAC,GAAU,AAAuB,OAAvB,EAAO,WAAW,CAGjC,OAAO,CACT,GAEG,GAAG,CAAC,CAAC,CAAA,MAAE,CAAK,CAAA,YAAE,CAAW,CAAA,OAAE,CAAM,CAAA,aAAE,CAAY,CAAE,IAChD,IAAI,EAAO,EAAO,GAAG,CAAC,AAAA,GAAQ,EAAK,IAAI,EAAE,IAAI,CAAC,MAC1C,EAAY,EAAa,KAAK,CAAC,EAAG,GAEtC,MAAO,CAAC;;;wDAGwC,EAAE,EAAY;;uDAEf,EAAE,EAAM;6DACF,EAAE,EAAK,SAAS,EAAE,EAAU;;;iBAGxE,CAAC,AACZ,GACC,IAAI,CAAC,KACR,EAAQ,kBAAkB,CAAC,YAAa,EAC1C,CAAE,MAAO,EAAO,CACd,QAAQ,GAAG,CAAC,EACd,CACF","sources":["<anon>","src/index.js"],"sourcesContent":["var $1f0dc3b9307be026$exports = {};\nconst $1f0dc3b9307be026$var$API_KEY = \"8c1c21cb3de0f31fcce2cce049e2c70c\";\nconst $1f0dc3b9307be026$var$BASE_URL_ALL = \"https://api.themoviedb.org/3/trending/all/day\";\nconst $1f0dc3b9307be026$var$BASE_URL_GANRE = \"https://api.themoviedb.org/3/movie/\";\n$1f0dc3b9307be026$var$createMarkup();\nasync function $1f0dc3b9307be026$var$fetchMovies(page = 1) {\n    const response = await fetch(`${$1f0dc3b9307be026$var$BASE_URL_ALL}?api_key=${$1f0dc3b9307be026$var$API_KEY}&page=${page}`);\n    const data = await response.json();\n    const genreRequests = await data.results.map(async (movieId)=>{\n        try {\n            const resp = await fetch(`${$1f0dc3b9307be026$var$BASE_URL_GANRE}${movieId.id}?api_key=${$1f0dc3b9307be026$var$API_KEY}&include_image_language=en,null`);\n            if (!resp.ok) throw new Error(resp.statusText);\n            const data = await resp.json();\n            return data;\n        } catch (error) {\n            console.log(\"Errorrrrrr\", error);\n        }\n    });\n    return Promise.all(genreRequests);\n}\nconst $1f0dc3b9307be026$var$jsCards = document.querySelector(\".js-cards\");\nasync function $1f0dc3b9307be026$var$createMarkup() {\n    try {\n        const data = await $1f0dc3b9307be026$var$fetchMovies();\n        const successfulMoviesData = data.filter((movies)=>{\n            if (!movies || movies.poster_path === null) return;\n            return movies;\n        });\n        const markup = successfulMoviesData.map(({ title: title, poster_path: poster_path, genres: genres, release_date: release_date })=>{\n            let genr = genres.map((item)=>item.name).join(\", \");\n            let dateMovie = release_date.slice(0, 4);\n            return `\n            <li class=\"page-item\">\n               <a href=\"#\" class=\"page-item__link\">\n               <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n               <div class=\"page-description\">\n                   <h2 class=\"page-description__title\">${title}</h2>\n                   <p class=\"page-description__podscription\">${genr} <span>| ${dateMovie}</span></p>\n               </div>\n               </a>\n            </li>`;\n        }).join(\" \");\n        $1f0dc3b9307be026$var$jsCards.insertAdjacentHTML(\"beforeend\", markup);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n//# sourceMappingURL=index.c6443d0e.js.map\n","const API_KEY = '8c1c21cb3de0f31fcce2cce049e2c70c';\nconst BASE_URL_ALL = 'https://api.themoviedb.org/3/trending/all/day';\nconst BASE_URL_GANRE = 'https://api.themoviedb.org/3/movie/';\n\ncreateMarkup();\nasync function fetchMovies(page = 1) {\n  const response = await fetch(`${BASE_URL_ALL}?api_key=${API_KEY}&page=${page}`);\n  const data = await response.json();\n\n  const genreRequests = await data.results.map(async movieId => {\n    try {\n      const resp = await fetch(\n        `${BASE_URL_GANRE}${movieId.id}?api_key=${API_KEY}&include_image_language=en,null`\n      );\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n      const data = await resp.json();\n      return data;\n    } catch (error) {\n      console.log('Errorrrrrr', error);\n    }\n  });\n  return Promise.all(genreRequests);\n}\n\nconst jsCards = document.querySelector('.js-cards');\n\nasync function createMarkup() {\n  try {\n    const data = await fetchMovies();\n    const successfulMoviesData = data.filter(movies => {\n      if (!movies || movies.poster_path === null) {\n        return;\n      }\n      return movies;\n    });\n    const markup = successfulMoviesData\n      .map(({ title, poster_path, genres, release_date }) => {\n        let genr = genres.map(item => item.name).join(', ');\n        let dateMovie = release_date.slice(0, 4);\n\n        return `\n            <li class=\"page-item\">\n               <a href=\"#\" class=\"page-item__link\">\n               <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n               <div class=\"page-description\">\n                   <h2 class=\"page-description__title\">${title}</h2>\n                   <p class=\"page-description__podscription\">${genr} <span>| ${dateMovie}</span></p>\n               </div>\n               </a>\n            </li>`;\n      })\n      .join(' ');\n    jsCards.insertAdjacentHTML('beforeend', markup);\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["$1f0dc3b9307be026$var$API_KEY","$1f0dc3b9307be026$var$fetchMovies","page","response","fetch","data","json","Promise","all","results","map","movieId","resp","id","ok","Error","statusText","error","console","log","$1f0dc3b9307be026$var$createMarkup","$1f0dc3b9307be026$var$jsCards","document","querySelector","markup","successfulMoviesData","filter","movies","poster_path","title","genres","release_date","genr","item","name","join","dateMovie","slice","insertAdjacentHTML"],"version":3,"file":"index.c6443d0e.js.map"}