{"mappings":"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","sources":["<anon>","src/index.js","src/js/refs.js","src/js/fetchMovie.js","src/js/createMarkup.js"],"sourcesContent":["(function () {\nvar $37e33676934ad046$export$2e2bcd8739ae039 = {\n    //API\n    API_KEY: \"8c1c21cb3de0f31fcce2cce049e2c70c\",\n    BASE_URL_ALL: \"https://api.themoviedb.org/3/trending/all/day\",\n    BASE_URL_GENRE: \"https://api.themoviedb.org/3/movie/\",\n    //main\n    cards: document.querySelector(\".js-cards\"),\n    arrowRight: document.querySelector(\".js-arrow-to_right\"),\n    arrowLeft: document.querySelector(\".js-arrow-to_left\")\n};\n\n\n\nconst { API_KEY: $30f8e97d7179aa3a$var$API_KEY, BASE_URL_ALL: $30f8e97d7179aa3a$var$BASE_URL_ALL, BASE_URL_GENRE: $30f8e97d7179aa3a$var$BASE_URL_GENRE } = (0, $37e33676934ad046$export$2e2bcd8739ae039);\nasync function $30f8e97d7179aa3a$export$2e2bcd8739ae039(page = 1) {\n    //Получаем все фильмы \n    const response = await fetch(`${$30f8e97d7179aa3a$var$BASE_URL_ALL}?api_key=${$30f8e97d7179aa3a$var$API_KEY}&page=${page}`);\n    const data = await response.json();\n    const genreRequests = await data.results.map(async (movieId)=>{\n        try {\n            //Получаем все инфу по ID\n            const resp = await fetch(`${$30f8e97d7179aa3a$var$BASE_URL_GENRE}${movieId.id}?api_key=${$30f8e97d7179aa3a$var$API_KEY}&include_image_language=en,null`);\n            if (!resp.ok) throw new Error(resp.statusText);\n            const data = await resp.json();\n            return data;\n        } catch (error) {\n            console.log(\"Errorrrrrr\", error);\n        }\n    });\n    return await Promise.all(genreRequests);\n}\n\n\n\nconst { cards: $7406f4e6957bfce5$var$cards } = (0, $37e33676934ad046$export$2e2bcd8739ae039);\nasync function $7406f4e6957bfce5$export$24783e9f3a24abe4(data) {\n    try {\n        //Отбираем те в которых есть фото и нет ошибки\n        const successfulMoviesData = data.filter((movies)=>{\n            if (!movies || movies.poster_path === null) return;\n            return movies;\n        });\n        const markup = successfulMoviesData.map(({ title: title, poster_path: poster_path, genres: genres, release_date: release_date })=>{\n            let genr = genres.map((item)=>item.name).join(\", \");\n            let dateMovie = release_date.slice(0, 4);\n            return `\n              <li class=\"page-item\">\n                 <a href=\"#\" class=\"page-item__link\">\n                 <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n                 <div class=\"page-description\">\n                     <h2 class=\"page-description__title\">${title}</h2>\n                     <p class=\"page-description__podscription\">${genr} <span>| ${dateMovie}</span></p>\n                 </div>\n                 </a>\n              </li>`;\n        }).join(\" \");\n        $7406f4e6957bfce5$var$cards.insertAdjacentHTML(\"beforeend\", markup);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nlet $b8f9b7833fa37166$var$page = 1;\nconst { API_KEY: $b8f9b7833fa37166$var$API_KEY, BASE_URL_ALL: $b8f9b7833fa37166$var$BASE_URL_ALL, cards: $b8f9b7833fa37166$var$cards, arrowRight: $b8f9b7833fa37166$var$arrowRight, arrowLeft: $b8f9b7833fa37166$var$arrowLeft } = (0, $37e33676934ad046$export$2e2bcd8739ae039);\n$b8f9b7833fa37166$var$init();\nasync function $b8f9b7833fa37166$var$init() {\n    const data = await (0, $30f8e97d7179aa3a$export$2e2bcd8739ae039)($b8f9b7833fa37166$var$page);\n    await (0, $7406f4e6957bfce5$export$24783e9f3a24abe4)(data);\n    $b8f9b7833fa37166$var$updatePage();\n}\nconst $b8f9b7833fa37166$var$arrows = {\n    handleRightClick: async ()=>{\n        $b8f9b7833fa37166$var$page += 1;\n        try {\n            $b8f9b7833fa37166$var$clearPage();\n            const data = await (0, $30f8e97d7179aa3a$export$2e2bcd8739ae039)($b8f9b7833fa37166$var$page);\n            (0, $7406f4e6957bfce5$export$24783e9f3a24abe4)(data);\n            $b8f9b7833fa37166$var$updatePage();\n        } catch (error) {\n            console.error(error);\n        }\n    },\n    handleLeftClick: async ()=>{\n        $b8f9b7833fa37166$var$page -= 1;\n        try {\n            $b8f9b7833fa37166$var$clearPage();\n            const data = await (0, $30f8e97d7179aa3a$export$2e2bcd8739ae039)($b8f9b7833fa37166$var$page);\n            (0, $7406f4e6957bfce5$export$24783e9f3a24abe4)(data);\n            $b8f9b7833fa37166$var$updatePage();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n};\nconst { handleLeftClick: $b8f9b7833fa37166$var$handleLeftClick, handleRightClick: $b8f9b7833fa37166$var$handleRightClick } = $b8f9b7833fa37166$var$arrows;\n$b8f9b7833fa37166$var$arrowLeft.addEventListener(\"click\", $b8f9b7833fa37166$var$handleLeftClick);\n$b8f9b7833fa37166$var$arrowRight.addEventListener(\"click\", $b8f9b7833fa37166$var$handleRightClick);\nfunction $b8f9b7833fa37166$var$clearPage() {\n    $b8f9b7833fa37166$var$cards.innerHTML = \"\";\n}\nasync function $b8f9b7833fa37166$var$updatePage() {\n    const response = await fetch(`${$b8f9b7833fa37166$var$BASE_URL_ALL}?api_key=${$b8f9b7833fa37166$var$API_KEY}&page=${$b8f9b7833fa37166$var$page}`);\n    const data = await response.json();\n    const reft = {\n        totalPageCount: data.total_pages,\n        currentPage: $b8f9b7833fa37166$var$page,\n        pageNumbers: [],\n        maxPageBtn: 9,\n        nearEdgeThreshold: 3,\n        pageNumbersHtml: document.querySelector(\".js-list\")\n    };\n    const { totalPageCount: totalPageCount, currentPage: currentPage, pageNumbers: pageNumbers, maxPageBtn: maxPageBtn, nearEdgeThreshold: nearEdgeThreshold, pageNumbersHtml: pageNumbersHtml } = reft;\n    if (totalPageCount <= maxPageBtn) for(let i = 1; i <= totalPageCount; i += 1)pageNumbers.push(i);\n    else {\n        // 1                 3  + 1\n        if (currentPage <= nearEdgeThreshold + 1) {\n            for(let i = 1; i <= maxPageBtn - 2; i += 1)pageNumbers.push(i);\n            pageNumbers.push(\"...\");\n            pageNumbers.push(totalPageCount);\n        } else if (currentPage >= totalPageCount - nearEdgeThreshold) {\n            pageNumbers.push(1);\n            pageNumbers.push(\"...\");\n            for(let i = totalPageCount - maxPageBtn + 3; i <= totalPageCount; i += 1)pageNumbers.push(i);\n        } else {\n            pageNumbers.push(1);\n            pageNumbers.push(\"...\");\n            for(let i = currentPage - nearEdgeThreshold; i <= currentPage + nearEdgeThreshold; i += 1)pageNumbers.push(i);\n            pageNumbers.push(\"...\");\n            pageNumbers.push(totalPageCount);\n        }\n    }\n    const pageNumbersHTML = pageNumbers.map((number)=>{\n        if (number === \"...\") return `<span>${number}</span>`;\n        else {\n            const activeClass = $b8f9b7833fa37166$var$page === number ? \"isactive\" : \"\";\n            $b8f9b7833fa37166$var$page === 1 && number;\n            return `<button class=\"js-page-number ${activeClass}\" data-page=\"${number}\">${number}</button>`;\n        }\n    }).join(\"\");\n    pageNumbersHtml.innerHTML = pageNumbersHTML;\n    $b8f9b7833fa37166$var$arrowRight.disabled = $b8f9b7833fa37166$var$page === totalPageCount;\n    $b8f9b7833fa37166$var$arrowLeft.disabled = $b8f9b7833fa37166$var$page === 1;\n    document.querySelectorAll(\".js-page-number\").forEach((button)=>{\n        button.addEventListener(\"click\", async ()=>{\n            const newPage = parseInt(button.dataset.page);\n            if (!isNaN(newPage)) {\n                $b8f9b7833fa37166$var$page = newPage;\n                $b8f9b7833fa37166$var$clearPage();\n                const data = await (0, $30f8e97d7179aa3a$export$2e2bcd8739ae039)($b8f9b7833fa37166$var$page);\n                (0, $7406f4e6957bfce5$export$24783e9f3a24abe4)(data);\n                $b8f9b7833fa37166$var$updatePage();\n            }\n        });\n    });\n}\n\n})();\n//# sourceMappingURL=index.fb351195.js.map\n","import refs from './js/refs';\nimport fetchMovies from './js/fetchMovie';\nimport { createMarkup } from './js/createMarkup';\nlet page = 1;\n\n\nconst { API_KEY, BASE_URL_ALL, cards, arrowRight, arrowLeft } =\n  refs;\n\ninit();\nasync function init() {\n  const data = await fetchMovies(page);\n  await createMarkup(data);\n  updatePage();\n}\nconst arrows = {\n    handleRightClick:  async () => {\n        page += 1;\n        try {\n          clearPage();\n          const data = await fetchMovies(page);\n          createMarkup(data);\n          updatePage();\n        } catch (error) {\n          console.error(error);\n        }\n      },\n      handleLeftClick: async () => {\n        page -= 1;\n        try {\n          clearPage();\n          const data = await fetchMovies(page);\n          createMarkup(data);\n          updatePage();\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n}\n\nconst {handleLeftClick,handleRightClick} = arrows\n\narrowLeft.addEventListener('click',handleLeftClick)\narrowRight.addEventListener('click',handleRightClick)\n\nfunction clearPage() {\n  cards.innerHTML = '';\n}\n\nasync function updatePage() {\n  const response = await fetch(\n    `${BASE_URL_ALL}?api_key=${API_KEY}&page=${page}`\n  );\n  const data = await response.json();\n\n  const reft = {\n    totalPageCount: data.total_pages,\n    currentPage: page,\n    pageNumbers: [],\n    maxPageBtn: 9,\n    nearEdgeThreshold: 3,\n    pageNumbersHtml: document.querySelector('.js-list'),\n  };\n\n  const {\n    totalPageCount,\n    currentPage,\n    pageNumbers,\n    maxPageBtn,\n    nearEdgeThreshold,\n    pageNumbersHtml,\n  } = reft;\n\n  if (totalPageCount <= maxPageBtn) {\n    for (let i = 1; i <= totalPageCount; i += 1) {\n      pageNumbers.push(i);\n    }\n  } else {\n    // 1                 3  + 1\n    if (currentPage <= nearEdgeThreshold + 1) {\n      for (let i = 1; i <= maxPageBtn - 2; i += 1) {\n        pageNumbers.push(i);\n      }\n      pageNumbers.push('...');\n      pageNumbers.push(totalPageCount);\n    } else if (currentPage >= totalPageCount - nearEdgeThreshold) {\n      pageNumbers.push(1);\n      pageNumbers.push('...');\n      for (\n        let i = totalPageCount - maxPageBtn + 3;\n        i <= totalPageCount;\n        i += 1\n      ) {\n        pageNumbers.push(i);\n      }\n    } else {\n      pageNumbers.push(1);\n      pageNumbers.push('...');\n      for (\n        let i = currentPage - nearEdgeThreshold;\n        i <= currentPage + nearEdgeThreshold;\n        i += 1\n      ) {\n        pageNumbers.push(i);\n      }\n      pageNumbers.push('...');\n      pageNumbers.push(totalPageCount);\n    }\n  }\n\n  const pageNumbersHTML = pageNumbers\n    .map(number => {\n      if (number === '...') {\n        return `<span>${number}</span>`;\n      } else {\n        const activeClass = page === number ? 'isactive' : '';\n        page === 1 && number === 1 ? 'disabled' : '';\n        return `<button class=\"js-page-number ${activeClass}\" data-page=\"${number}\">${number}</button>`;\n      }\n    })\n    .join('');\n\n  pageNumbersHtml.innerHTML = pageNumbersHTML;\n\n  arrowRight.disabled = page === totalPageCount;\n  arrowLeft.disabled = page === 1;\n\n  document.querySelectorAll('.js-page-number').forEach(button => {\n    button.addEventListener('click', async () => {\n      const newPage = parseInt(button.dataset.page);\n      if (!isNaN(newPage)) {\n        page = newPage;\n        clearPage();\n        const data = await fetchMovies(page);\n        createMarkup(data);\n        updatePage();\n      }\n    });\n  });\n}\n\n\n\n\n\n\n\n\n\n","export default {\n    //API\n    API_KEY: '8c1c21cb3de0f31fcce2cce049e2c70c',\n    BASE_URL_ALL: 'https://api.themoviedb.org/3/trending/all/day',\n    BASE_URL_GENRE: 'https://api.themoviedb.org/3/movie/',\n    \n    //main\n    cards: document.querySelector('.js-cards'),\n    arrowRight: document.querySelector('.js-arrow-to_right'),\n    arrowLeft: document.querySelector('.js-arrow-to_left'),\n}\n","import refs from \"./refs\";\nconst { API_KEY, BASE_URL_ALL, BASE_URL_GENRE,} =\n  refs;\nexport default async function fetchMovies(page = 1) {\n    //Получаем все фильмы \n  const response = await fetch(\n    `${BASE_URL_ALL}?api_key=${API_KEY}&page=${page}`\n  );\n  const data = await response.json();\n\n  const genreRequests = await data.results.map(async movieId => {\n      try {\n          //Получаем все инфу по ID\n      const resp = await fetch(\n        `${BASE_URL_GENRE}${movieId.id}?api_key=${API_KEY}&include_image_language=en,null`\n      );\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n      const data = await resp.json();\n      return data;\n    } catch (error) {\n      console.log('Errorrrrrr', error);\n    }\n  });\n  return await Promise.all(genreRequests);\n}","import refs from \"./refs\";\nconst { cards } = refs;\n  async function createMarkup(data) {\n    try {\n      //Отбираем те в которых есть фото и нет ошибки\n      const successfulMoviesData = data.filter(movies => {\n        if (!movies || movies.poster_path === null) {\n          return;\n        }\n        return movies;\n      });\n      const markup = successfulMoviesData\n        .map(({ title, poster_path, genres, release_date }) => {\n          let genr = genres.map(item => item.name).join(', ');\n          let dateMovie = release_date.slice(0, 4);\n  \n          return `\n              <li class=\"page-item\">\n                 <a href=\"#\" class=\"page-item__link\">\n                 <img src=\"https://image.tmdb.org/t/p/w500${poster_path}\">\n                 <div class=\"page-description\">\n                     <h2 class=\"page-description__title\">${title}</h2>\n                     <p class=\"page-description__podscription\">${genr} <span>| ${dateMovie}</span></p>\n                 </div>\n                 </a>\n              </li>`;\n        })\n        .join(' ');\n      cards.insertAdjacentHTML('beforeend', markup);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  export {createMarkup}"],"names":["$37e33676934ad046$export$2e2bcd8739ae039","API_KEY","BASE_URL_ALL","BASE_URL_GENRE","cards","document","querySelector","arrowRight","arrowLeft","$30f8e97d7179aa3a$var$API_KEY","$30f8e97d7179aa3a$var$BASE_URL_ALL","$30f8e97d7179aa3a$var$BASE_URL_GENRE","$30f8e97d7179aa3a$export$2e2bcd8739ae039","page","response","fetch","data","json","genreRequests","results","map","movieId","resp","id","ok","Error","statusText","error","console","log","Promise","all","$7406f4e6957bfce5$var$cards","$7406f4e6957bfce5$export$24783e9f3a24abe4","markup","successfulMoviesData","filter","movies","poster_path","title","genres","release_date","genr","item","name","join","dateMovie","slice","insertAdjacentHTML","$b8f9b7833fa37166$var$page","$b8f9b7833fa37166$var$API_KEY","$b8f9b7833fa37166$var$BASE_URL_ALL","$b8f9b7833fa37166$var$cards","$b8f9b7833fa37166$var$arrowRight","$b8f9b7833fa37166$var$arrowLeft","$b8f9b7833fa37166$var$init","$b8f9b7833fa37166$var$updatePage","handleLeftClick","$b8f9b7833fa37166$var$handleLeftClick","handleRightClick","$b8f9b7833fa37166$var$handleRightClick","$b8f9b7833fa37166$var$clearPage","innerHTML","totalPageCount","currentPage","pageNumbers","maxPageBtn","nearEdgeThreshold","pageNumbersHtml","total_pages","i","push","pageNumbersHTML","number","activeClass","disabled","querySelectorAll","forEach","button","addEventListener","newPage","parseInt","dataset","isNaN"],"version":3,"file":"index.fb351195.js.map"}